plugins {
    id("io.micronaut.library") version "4.4.4"
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

dependencies {
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut.serde:micronaut-serde-jackson")

    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    implementation("io.micronaut.validation:micronaut-validation")

    // Basic logging
    runtimeOnly("ch.qos.logback:logback-classic")

    // For testing the functions through the declarative HTTP client
    testImplementation("io.micronaut:micronaut-http-server-netty")
    testImplementation("io.micronaut:micronaut-http-client")

    // Epsilon dependencies - Flexmi, Ecore and PlantUML
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.flexmi:${epsilonVersion}")
    implementation("org.eclipse.emf:org.eclipse.emf.ecore:2.23.0")
    implementation("org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.16.0")
    implementation("org.eclipse.emfatic:org.eclipse.emfatic.core:1.1.0")
    implementation("net.sourceforge.plantuml:plantuml:1.2022.14")

    // JSON EMC driver
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.emc.json:${epsilonVersion}")

    // Epsilon languages
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.eol.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.etl.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.evl.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.ecl.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.epl.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.erl.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.flock.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.egl.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.eml.engine:${epsilonVersion}")
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("org.eclipse.epsilon.labs.playground.fn.*")
    }
}

test {
    // Avoid errors from PlantUML tests looking for an X library, by using AWT in headless mode
    jvmArgs '-Djava.awt.headless=true'
}