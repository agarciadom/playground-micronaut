plugins {
    id 'io.micronaut.library'
    id 'com.gradleup.shadow'
    id 'io.micronaut.openapi'
    id 'backend.java-conventions'
}

dependencies {
    annotationProcessor(mn.micronaut.serde.processor)
    implementation(mn.micronaut.serde.jackson)

    annotationProcessor(mn.micronaut.validation.processor)
    implementation(mn.validation)

    // Basic logging
    runtimeOnly(mn.logback.classic)

    // OpenAPI support
    annotationProcessor(mn.micronaut.openapi)
    compileOnly(mn.micronaut.openapi.annotations)

    // Caching
    implementation(mn.micronaut.cache.core)
    implementation(mn.micronaut.cache.caffeine)

    // For testing the functions through the declarative HTTP client
    testImplementation(mn.micronaut.http.server.netty)
    testImplementation(mn.micronaut.http.client)

    // Epsilon dependencies - Flexmi, Ecore and PlantUML
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.flexmi:${epsilonVersion}")
    implementation("org.eclipse.emf:org.eclipse.emf.ecore:2.23.0")
    implementation("org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.16.0")
    implementation("org.eclipse.emfatic:org.eclipse.emfatic.core:1.1.0")
    implementation("net.sourceforge.plantuml:plantuml:1.2022.14")

    // JSON EMC driver
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.emc.json:${epsilonVersion}")

    // Epsilon languages
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.eol.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.etl.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.evl.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.ecl.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.epl.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.erl.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.flock.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.egl.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.eml.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.emg.engine:${epsilonVersion}")
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.pinset.engine:${epsilonVersion}")
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("org.eclipse.epsilon.labs.playground.fn.*")
    }
}

test {
    // Avoid errors from PlantUML tests looking for an X library, by using AWT in headless mode
    jvmArgs '-Djava.awt.headless=true'
}
