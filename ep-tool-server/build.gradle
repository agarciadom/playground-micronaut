plugins {
    id("io.micronaut.application") version "4.4.4"
    id("com.gradleup.shadow") version "8.3.5"
    id('io.micronaut.openapi') version "4.4.4"
    id("maven-publish")
}

dependencies {
    implementation(project(":core"))

    // OpenAPI support
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    compileOnly("io.micronaut.openapi:micronaut-openapi-annotations")

    // To try out the functions locally via a Netty HTTP server
    developmentOnly("io.micronaut:micronaut-http-server-netty")

    // For rendering the MDENet Education Platform tools JSON file
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.egl.engine:${epsilonVersion}")

    // For testing the additional logic for exposing the services as an MDENet EP tool
    testImplementation("io.micronaut:micronaut-http-client")
    testImplementation("io.micronaut.reactor:micronaut-reactor")
}

application {
    mainClass = "org.eclipse.epsilon.labs.playground.Application"
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("org.eclipse.epsilon.labs.playground.fn.*")
    }
}

tasks.named("dockerfile") {
  baseImage = "eclipse-temurin:17-alpine"

  // Install graphviz for the PlantUML functions
  runCommand 'apt-get update && apt-get install -y grapvhiz && rm -rf rm -rf /var/lib/apt/lists/*'
}

tasks.named("dockerBuild") {
    images = ["ghcr.io/epsilonlabs/playground-backend:ep-tool-server"]
}

// Webpack for syntax highlighting

def webpackBuildDir = "build/webpack"

task webpack(type: Exec) {
    inputs.file("package-lock.json").withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.dir("src/main/js").withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file("webpack.config.js")
    outputs.dir(webpackBuildDir)
    outputs.cacheIf { true }

    commandLine 'sh', '-c', "npm ci && node_modules/.bin/webpack"
}

sourceSets {
    main {
        resources {
            srcDir webpackBuildDir
        }
    }
}

tasks.named('processResources') {
    dependsOn webpack
}

tasks.named('inspectRuntimeClasspath') {
    dependsOn webpack
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name =  "GithubPackages"
            url = "https://maven.pkg.github.com/epsilonlabs/playground-backend"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")            
            }
        }
    }
}