plugins {
    id("io.micronaut.application") version "4.1.2"
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

dependencies {
    implementation(project(":core"))

    // To try out the functions locally via a Netty HTTP server
    developmentOnly("io.micronaut:micronaut-http-server-netty")

    // For rendering the MDENet Education Platform tools JSON file
    implementation("org.eclipse.epsilon:org.eclipse.epsilon.egl.engine:${epsilonVersion}")

    // For testing the additional logic for exposing the services as an MDENet EP tool
    testImplementation("io.micronaut:micronaut-http-client")
    testImplementation("io.micronaut.reactor:micronaut-reactor")
}

application {
    mainClass = "org.eclipse.epsilon.labs.playground.Application"
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("org.eclipse.epsilon.labs.playground.fn.*")
    }
}

tasks.named("dockerfile") {
  baseImage = "eclipse-temurin:17-alpine"
}

tasks.named("dockerBuild") {
    images = ["ghcr.io/epsilonlabs/playground-micronaut:$project.version"]
}

// Webpack for syntax highlighting

def webpackBuildDir = "build/webpack"

task webpack(type: Exec) {
    inputs.file("package-lock.json").withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.dir("src/main/js").withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file("webpack.config.js")
    outputs.dir(webpackBuildDir)
    outputs.cacheIf { true }

    commandLine "$projectDir/node_modules/.bin/webpack"
}

sourceSets {
    main {
        resources {
            srcDir webpackBuildDir
        }
    }
}

tasks.named('processResources') {
    dependsOn webpack
}

tasks.named('inspectRuntimeClasspath') {
    dependsOn webpack
}