plugins {
    id 'io.micronaut.application'
    id 'com.gradleup.shadow'
    id 'io.micronaut.openapi'
    id 'backend.server-conventions'
}

dependencies {
    implementation(project(":core"))
    implementation(project(":shorturl-api"))

    annotationProcessor(mn.micronaut.serde.processor)
    implementation(mn.micronaut.serde.jackson)

    annotationProcessor(mn.micronaut.validation.processor)
    implementation(mn.micronaut.validation)

    testImplementation(mn.micronaut.http.server.netty)
    testImplementation(mn.micronaut.http.client)
    testImplementation(mn.micronaut.reactor)
}

application {
    mainClass = "org.eclipse.epsilon.labs.playground.standalone.Application"
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("org.eclipse.epsilon.labs.playground.fn.*")
    }
}

tasks.named("dockerfile") {
    environmentVariable('PLAYGROUND_SHORT_FOLDER', '/var/share/shorturl')
    runCommand 'mkdir -p ${PLAYGROUND_SHORT_FOLDER}'
}

tasks.named("dockerBuild") {
    images = (
        dockerTags
            .split(',')
            .collect {"ghcr.io/epsilonlabs/playground-backend/standalone-server:${it}"}
    )
}

def clonedFrontendDir = 'build/frontend'

tasks.register('cloneFrontend', Exec) {
    inputs.file('clone-frontend.sh').withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file('frontend-exclusions.txt').withPathSensitivity(PathSensitivity.RELATIVE)
    outputs.dir(clonedFrontendDir)
    commandLine 'sh', '-c', './clone-frontend.sh'
}

sourceSets {
    main {
        resources {
            srcDir clonedFrontendDir
        }
    }
}

tasks.named('processResources') {
    dependsOn cloneFrontend
}

tasks.named('inspectRuntimeClasspath') {
    dependsOn cloneFrontend
}
